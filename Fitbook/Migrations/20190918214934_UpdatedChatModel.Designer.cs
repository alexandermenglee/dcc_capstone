// <auto-generated />
using System;
using Fitbook.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fitbook.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190918214934_UpdatedChatModel")]
    partial class UpdatedChatModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Fitbook.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Fitbook.Models.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FitbookUserId");

                    b.HasKey("ChatId");

                    b.HasIndex("FitbookUserId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Fitbook.Models.CustomRecipe", b =>
                {
                    b.Property<int>("CustomRecipeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Calories");

                    b.Property<int>("CaloriesPerServing");

                    b.Property<int>("Carbohydrates");

                    b.Property<int>("CategoryId");

                    b.Property<string>("CustomRecipeName");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)");

                    b.Property<int>("Fat");

                    b.Property<int>("FitbookUserId");

                    b.Property<int>("Protein");

                    b.Property<double?>("Servings");

                    b.HasKey("CustomRecipeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FitbookUserId");

                    b.ToTable("CustomRecipes");
                });

            modelBuilder.Entity("Fitbook.Models.Day", b =>
                {
                    b.Property<int>("DayId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Calories");

                    b.Property<int>("Carbohydates");

                    b.Property<DateTime>("Date");

                    b.Property<int>("Fat");

                    b.Property<int>("FitbookUserId");

                    b.Property<int>("Protein");

                    b.HasKey("DayId");

                    b.HasIndex("FitbookUserId");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("Fitbook.Models.FitbookUser", b =>
                {
                    b.Property<int>("FitbookUserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Age");

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("BMR");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<int?>("Height");

                    b.Property<string>("LastName");

                    b.Property<string>("Lifestyle");

                    b.Property<int?>("Weight");

                    b.HasKey("FitbookUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("FitbookUsers");
                });

            modelBuilder.Entity("Fitbook.Models.FitbookUsersMacronutrients", b =>
                {
                    b.Property<int>("MacronutrientId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Carbohydrates");

                    b.Property<int>("DailyCalories");

                    b.Property<int>("Fat");

                    b.Property<int>("FitbookUserId");

                    b.Property<int>("Protein");

                    b.HasKey("MacronutrientId");

                    b.HasIndex("FitbookUserId");

                    b.ToTable("FitbookUsersMacronutrients");
                });

            modelBuilder.Entity("Fitbook.Models.Food", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("Calories");

                    b.Property<int>("Carbohydrates");

                    b.Property<int>("Fat");

                    b.Property<string>("FoodName");

                    b.Property<string>("NIX_ID");

                    b.Property<int>("Protein");

                    b.HasKey("FoodId");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            FoodId = -1,
                            Amount = 4,
                            Calories = 0,
                            Carbohydrates = 0,
                            Fat = 1,
                            FoodName = "chicken breast",
                            Protein = 25
                        },
                        new
                        {
                            FoodId = -2,
                            Amount = 1,
                            Calories = 0,
                            Carbohydrates = 37,
                            Fat = 0,
                            FoodName = "brown rice",
                            Protein = 7
                        },
                        new
                        {
                            FoodId = -3,
                            Amount = 2,
                            Calories = 0,
                            Carbohydrates = 0,
                            Fat = 16,
                            FoodName = "olive oil",
                            Protein = 0
                        });
                });

            modelBuilder.Entity("Fitbook.Models.Meal", b =>
                {
                    b.Property<int>("MealId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DayId");

                    b.HasKey("MealId");

                    b.HasIndex("DayId");

                    b.ToTable("Meals");

                    b.HasData(
                        new
                        {
                            MealId = -1
                        },
                        new
                        {
                            MealId = -2
                        });
                });

            modelBuilder.Entity("Fitbook.Models.MealFood", b =>
                {
                    b.Property<int>("MealId");

                    b.Property<int>("FoodId");

                    b.HasKey("MealId", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("MealFood");
                });

            modelBuilder.Entity("Fitbook.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<string>("MessaegText")
                        .IsRequired();

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("MessageId");

                    b.HasIndex("ChatId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Fitbook.Models.RecommendedRecipe", b =>
                {
                    b.Property<int>("RecommendedRecipeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("RecommendedRecipeId");

                    b.ToTable("ReccommendedRecipes");
                });

            modelBuilder.Entity("Fitbook.Models.UserChat", b =>
                {
                    b.Property<int>("FitbookUserId");

                    b.Property<int>("ChatId");

                    b.HasKey("FitbookUserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Fitbook.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Name");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Fitbook.Models.Chat", b =>
                {
                    b.HasOne("Fitbook.Models.FitbookUser")
                        .WithMany("Chats")
                        .HasForeignKey("FitbookUserId");
                });

            modelBuilder.Entity("Fitbook.Models.CustomRecipe", b =>
                {
                    b.HasOne("Fitbook.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fitbook.Models.FitbookUser", "FitbookUser")
                        .WithMany()
                        .HasForeignKey("FitbookUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fitbook.Models.Day", b =>
                {
                    b.HasOne("Fitbook.Models.FitbookUser", "FitbookUser")
                        .WithMany()
                        .HasForeignKey("FitbookUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fitbook.Models.FitbookUser", b =>
                {
                    b.HasOne("Fitbook.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Fitbook.Models.FitbookUsersMacronutrients", b =>
                {
                    b.HasOne("Fitbook.Models.FitbookUser", "FitbookUser")
                        .WithMany()
                        .HasForeignKey("FitbookUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fitbook.Models.Meal", b =>
                {
                    b.HasOne("Fitbook.Models.Day", "Day")
                        .WithMany("Meals")
                        .HasForeignKey("DayId");
                });

            modelBuilder.Entity("Fitbook.Models.MealFood", b =>
                {
                    b.HasOne("Fitbook.Models.Food", "Food")
                        .WithMany("MealFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fitbook.Models.Meal", "Meal")
                        .WithMany("MealFoods")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fitbook.Models.Message", b =>
                {
                    b.HasOne("Fitbook.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fitbook.Models.UserChat", b =>
                {
                    b.HasOne("Fitbook.Models.Chat", "Chat")
                        .WithMany("UserChat")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fitbook.Models.FitbookUser", "FitbookUser")
                        .WithMany("UserChat")
                        .HasForeignKey("FitbookUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
